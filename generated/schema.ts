// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";
// Code generated from <RafaBlockDev> => Github
export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
    // We have the elements we want to know about the Rarible Tokens
    this.set("name", Value.fromString(""));
    this.set("tokenID", Value.fromBigInt(BigInt.zero()));
    this.set("contentURI", Value.fromString(""));
    this.set("metadataURI", Value.fromString(""));
    this.set("creator", Value.fromString(""));
    this.set("owner", Value.fromString(""));
    this.set("royalites", Value.fromI32(0));
    this.set("collection", Value.fromString(""));
    this.set("price", Value.fromI32(0));
    this.set("balances", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Token entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenID(): BigInt {
    let value = this.get("tokenID");
    return value!.toBigInt();
  }

  set tokenID(value: BigInt) {
    this.set("tokenID", Value.fromBigInt(value));
  }

  get contentURI(): string {
    let value = this.get("contentURI");
    return value!.toString();
  }

  set contentURI(value: string) {
    this.set("contentURI", Value.fromString(value));
  }

  get metadataURI(): string {
    let value = this.get("metadataURI");
    return value!.toString();
  }

  set metadataURI(value: string) {
    this.set("metadataURI", Value.fromString(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value!.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get royalites(): i32 {
    let value = this.get("royalites");
    return value!.toI32();
  }

  set royalites(value: i32) {
    this.set("royalites", Value.fromI32(value));
  }

  get collection(): string {
    let value = this.get("collection");
    return value!.toString();
  }

  set collection(value: string) {
    this.set("collection", Value.fromString(value));
  }

  get price(): i32 {
    let value = this.get("price");
    return value!.toI32();
  }

  set price(value: i32) {
    this.set("price", Value.fromI32(value));
  }

  get balances(): i32 {
    let value = this.get("balances");
    return value!.toI32();
  }

  set balances(value: i32) {
    this.set("balances", Value.fromI32(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("balances", Value.fromI32(0));
    this.set("collection", Value.fromStringArray(new Array(0)));
    this.set("price", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save User entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get balances(): i32 {
    let value = this.get("balances");
    return value!.toI32();
  }

  set balances(value: i32) {
    this.set("balances", Value.fromI32(value));
  }

  get collection(): Array<string> {
    let value = this.get("collection");
    return value!.toStringArray();
  }

  set collection(value: Array<string>) {
    this.set("collection", Value.fromStringArray(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value!.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }

  get created(): Array<string> {
    let value = this.get("created");
    return value!.toStringArray();
  }

  set created(value: Array<string>) {
    this.set("created", Value.fromStringArray(value));
  }

  get price(): i32 {
    let value = this.get("price");
    return value!.toI32();
  }

  set price(value: i32) {
    this.set("price", Value.fromI32(value));
  }
}

export class OwnershipTransferred extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("owner", Value.fromString(""));
    this.set("name", Value.fromString(""));
    this.set("balances", Value.fromI32(0));
    this.set("price", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OwnershipTransferred entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save OwnershipTransferred entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("OwnershipTransferred", id.toString(), this);
    }
  }

  static load(id: string): OwnershipTransferred | null {
    return changetype<OwnershipTransferred | null>(
      store.get("OwnershipTransferred", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get balances(): i32 {
    let value = this.get("balances");
    return value!.toI32();
  }

  set balances(value: i32) {
    this.set("balances", Value.fromI32(value));
  }

  get price(): i32 {
    let value = this.get("price");
    return value!.toI32();
  }

  set price(value: i32) {
    this.set("price", Value.fromI32(value));
  }
}
